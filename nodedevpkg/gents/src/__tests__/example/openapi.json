{
  "openapi": "3.0.3",
  "info": {
    "title": "",
    "version": ""
  },
  "paths": {
    "/api/kubepkg.innoai.tech": {
      "GET": {
        "tags": [
          "httprouter"
        ],
        "operationId": "OpenAPI",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/kubepkg.innoai.tech/v1/blobs": {
      "PUT": {
        "tags": [
          "blob"
        ],
        "summary": "上传 blob",
        "operationId": "UploadBlob",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"InvalidContentType\",msg=\"InvalidContentType\",code=400}"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"RegistryError\",msg=\"RegistryError\",code=500}"
            ]
          }
        }
      }
    },
    "/api/kubepkg.innoai.tech/v1/blobs/{digest}/stat": {
      "GET": {
        "tags": [
          "blob"
        ],
        "summary": "查询 blob 状态",
        "operationId": "StatBlob",
        "parameters": [
          {
            "name": "digest",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "enum": [
                    "sha256"
                  ]
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"InvalidDigest\",msg=\"InvalidDigest\",code=400}"
            ]
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"DigestNotFound\",msg=\"DigestNotFound\",code=404}"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"RegistryError\",msg=\"RegistryError\",code=500}"
            ]
          }
        }
      }
    },
    "/api/kubepkg.innoai.tech/v1/kubepkgs": {
      "GET": {
        "tags": [
          "kubepkg"
        ],
        "summary": "部署包列表",
        "operationId": "ListKubePkg",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkg"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"RequestK8sFailed\",msg=\"RequestK8sFailed\",code=500}"
            ]
          }
        }
      },
      "PUT": {
        "tags": [
          "kubepkg"
        ],
        "summary": "部署部署包",
        "operationId": "ApplyKubePkg",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkg"
                  },
                  {
                    "description": "通过 KubePkg.json 部署"
                  }
                ]
              }
            },
            "application/octet-stream": {
              "schema": {
                "description": "通过 KubePkg.tgz 部署"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkg"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"ReadKubePkgTgzFailed\",msg=\"ReadKubePkgTgzFailed\",code=400}",
              "StatusError{key=\"NoRequestBody\",msg=\"NoRequestBody\",code=400}"
            ]
          }
        }
      }
    },
    "/api/kubepkg.innoai.tech/v1/kubepkgs/{name}": {
      "DELETE": {
        "tags": [
          "kubepkg"
        ],
        "summary": "删除部署包",
        "operationId": "DelKubePkg",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"RequestK8sFailed\",msg=\"RequestK8sFailed\",code=500}"
            ]
          }
        }
      },
      "GET": {
        "tags": [
          "kubepkg"
        ],
        "summary": "查询部署包",
        "operationId": "GetKubePkg",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkg"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatuserrorStatusErr"
                }
              }
            },
            "x-status-returnErrors": [
              "StatusError{key=\"RequestK8sFailed\",msg=\"RequestK8sFailed\",code=500}"
            ]
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "KubepkgV1Alpha1DigestMeta": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "x-go-field-name": "Digest"
          },
          "name": {
            "type": "string",
            "x-go-field-name": "Name"
          },
          "platform": {
            "type": "string",
            "x-go-field-name": "Platform"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KubepkgV1Alpha1FileSize"
              },
              {
                "x-go-field-name": "Size"
              }
            ]
          },
          "tag": {
            "type": "string",
            "x-go-field-name": "Tag"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KubepkgV1Alpha1DigestMetaType"
              },
              {
                "x-go-field-name": "Type"
              }
            ]
          }
        },
        "required": [
          "type",
          "digest",
          "name",
          "size"
        ],
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.DigestMeta"
      },
      "KubepkgV1Alpha1DigestMetaType": {
        "type": "string",
        "enum": [
          "blob",
          "manifest"
        ],
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.DigestMetaType"
      },
      "KubepkgV1Alpha1FileSize": {
        "type": "integer",
        "format": "int64",
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.FileSize"
      },
      "KubepkgV1Alpha1KubePkg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetaV1TypeMeta"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetaV1ObjectMeta"
                  },
                  {
                    "x-go-field-name": "ObjectMeta"
                  }
                ]
              },
              "spec": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkgSpec"
                  },
                  {
                    "x-go-field-name": "Spec"
                  }
                ]
              },
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KubepkgV1Alpha1KubePkgStatus"
                  },
                  {
                    "x-go-field-name": "Status"
                  }
                ]
              }
            }
          }
        ],
        "description": "KubePkg",
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.KubePkg"
      },
      "KubepkgV1Alpha1KubePkgSpec": {
        "type": "object",
        "properties": {
          "images": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "x-go-field-name": "Images"
          },
          "manifests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KubepkgV1Alpha1Manifests"
              },
              {
                "x-go-field-name": "Manifests"
              }
            ]
          },
          "version": {
            "type": "string",
            "x-go-field-name": "Version"
          }
        },
        "required": [
          "version"
        ],
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.KubePkgSpec"
      },
      "KubepkgV1Alpha1KubePkgStatus": {
        "type": "object",
        "properties": {
          "digests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KubepkgV1Alpha1DigestMeta"
            },
            "x-go-field-name": "Digests"
          },
          "statuses": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KubepkgV1Alpha1Statuses"
              },
              {
                "x-go-field-name": "Statuses"
              }
            ]
          }
        },
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.KubePkgStatus"
      },
      "KubepkgV1Alpha1Manifests": {
        "type": "object",
        "additionalProperties": {},
        "propertyNames": {
          "type": "string"
        },
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.Manifests"
      },
      "KubepkgV1Alpha1Statuses": {
        "type": "object",
        "additionalProperties": {},
        "propertyNames": {
          "type": "string"
        },
        "x-go-vendor-type": "github.com/octohelm/kubepkg/pkg/apis/kubepkg/v1alpha1.Statuses"
      },
      "MetaV1FieldsV1": {
        "type": "object",
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1"
      },
      "MetaV1ManagedFieldsEntry": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "x-go-field-name": "APIVersion"
          },
          "fieldsType": {
            "type": "string",
            "x-go-field-name": "FieldsType"
          },
          "fieldsV1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaV1FieldsV1"
              },
              {
                "x-go-field-name": "FieldsV1"
              }
            ]
          },
          "manager": {
            "type": "string",
            "x-go-field-name": "Manager"
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaV1ManagedFieldsOperationType"
              },
              {
                "x-go-field-name": "Operation"
              }
            ]
          },
          "subresource": {
            "type": "string",
            "x-go-field-name": "Subresource"
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaV1Time"
              },
              {
                "x-go-field-name": "Time"
              }
            ]
          }
        },
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry"
      },
      "MetaV1ManagedFieldsOperationType": {
        "type": "string",
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsOperationType"
      },
      "MetaV1ObjectMeta": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "x-go-field-name": "Annotations"
          },
          "clusterName": {
            "type": "string",
            "x-go-field-name": "ZZZ_DeprecatedClusterName"
          },
          "creationTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaV1Time"
              },
              {
                "x-go-field-name": "CreationTimestamp"
              }
            ]
          },
          "deletionGracePeriodSeconds": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "x-go-field-name": "DeletionGracePeriodSeconds",
            "x-go-star-level": 1
          },
          "deletionTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaV1Time"
              },
              {
                "x-go-field-name": "DeletionTimestamp"
              }
            ]
          },
          "finalizers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-field-name": "Finalizers"
          },
          "generateName": {
            "type": "string",
            "x-go-field-name": "GenerateName"
          },
          "generation": {
            "type": "integer",
            "format": "int64",
            "x-go-field-name": "Generation"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "x-go-field-name": "Labels"
          },
          "managedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaV1ManagedFieldsEntry"
            },
            "x-go-field-name": "ManagedFields"
          },
          "name": {
            "type": "string",
            "x-go-field-name": "Name"
          },
          "namespace": {
            "type": "string",
            "x-go-field-name": "Namespace"
          },
          "ownerReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaV1OwnerReference"
            },
            "x-go-field-name": "OwnerReferences"
          },
          "resourceVersion": {
            "type": "string",
            "x-go-field-name": "ResourceVersion"
          },
          "selfLink": {
            "type": "string",
            "x-go-field-name": "SelfLink"
          },
          "uid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TypesUid"
              },
              {
                "x-go-field-name": "UID"
              }
            ]
          }
        },
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"
      },
      "MetaV1OwnerReference": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "x-go-field-name": "APIVersion"
          },
          "blockOwnerDeletion": {
            "type": "boolean",
            "nullable": true,
            "x-go-field-name": "BlockOwnerDeletion",
            "x-go-star-level": 1
          },
          "controller": {
            "type": "boolean",
            "nullable": true,
            "x-go-field-name": "Controller",
            "x-go-star-level": 1
          },
          "kind": {
            "type": "string",
            "x-go-field-name": "Kind"
          },
          "name": {
            "type": "string",
            "x-go-field-name": "Name"
          },
          "uid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TypesUid"
              },
              {
                "x-go-field-name": "UID"
              }
            ]
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "name",
          "uid"
        ],
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"
      },
      "MetaV1Time": {
        "type": "string",
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.Time"
      },
      "MetaV1TypeMeta": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "x-go-field-name": "APIVersion"
          },
          "kind": {
            "type": "string",
            "x-go-field-name": "Kind"
          }
        },
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"
      },
      "StatuserrorErrorField": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "field path\nprop.slice[2].a",
            "x-go-field-name": "Field"
          },
          "in": {
            "type": "string",
            "description": "location\neq. body, query, header, path, formData",
            "x-go-field-name": "In"
          },
          "msg": {
            "type": "string",
            "description": "msg",
            "x-go-field-name": "Msg"
          }
        },
        "required": [
          "field",
          "msg",
          "in"
        ],
        "x-go-vendor-type": "github.com/octohelm/courier/pkg/statuserror.ErrorField"
      },
      "StatuserrorErrorFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StatuserrorErrorField"
        },
        "x-go-vendor-type": "github.com/octohelm/courier/pkg/statuserror.ErrorFields"
      },
      "StatuserrorStatusErr": {
        "type": "object",
        "properties": {
          "canBeTalkError": {
            "type": "boolean",
            "description": "can be task error\nfor client to should error msg to end user",
            "x-go-field-name": "CanBeTalkError"
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "http code",
            "x-go-field-name": "Code"
          },
          "desc": {
            "type": "string",
            "description": "desc of err",
            "x-go-field-name": "Desc"
          },
          "errorFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatuserrorErrorFields"
              },
              {
                "description": "error in where fields",
                "x-go-field-name": "ErrorFields"
              }
            ]
          },
          "key": {
            "type": "string",
            "description": "key of err",
            "x-go-field-name": "Key"
          },
          "msg": {
            "type": "string",
            "description": "msg of err",
            "x-go-field-name": "Msg"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "error tracing",
            "x-go-field-name": "Sources"
          }
        },
        "required": [
          "code",
          "key",
          "msg",
          "desc",
          "canBeTalkError",
          "sources",
          "errorFields"
        ],
        "x-go-vendor-type": "github.com/octohelm/courier/pkg/statuserror.StatusErr"
      },
      "TypesUid": {
        "type": "string",
        "x-go-vendor-type": "k8s.io/apimachinery/pkg/types.UID"
      }
    }
  }
}
